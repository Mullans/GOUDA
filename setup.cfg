# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = GOUDA
description = Good Old Utilities for Data Analysis!
author = Sean Mullan
author-email = sean-mullan@uiowa.edu
license = mit
long-description = file: README.rst
long-description-content-type = text/x-rst; charset=UTF-8
url = https://github.com/mullans/GOUDA
project-urls =
    Documentation = https://github.com/mullans/GOUDA
platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    License :: OSI Approved :: MIT License
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Topic :: Scientific/Engineering
    Topic :: Scientific/Engineering :: Information Analysis
    Topic :: Scientific/Engineering :: Mathematics
    Topic :: Software Development :: Libraries
    Topic :: Software Development :: Libraries :: Python Modules
    Natural Language :: English

[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src
# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!
install_requires =
    importlib-metadata; python_version<"3.8"
    numpy
    colorama
    matplotlib
python_requires = >=3.6
[options.packages.find]
where = src
exclude = tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install GOUDA[PDF]` like:
# PDF = ReportLab; RXP
IMAGE = opencv-python
# Add here test requirements (semicolon/line-separated)
testing = pytest; pytest-cov; opencv-python

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = gouda.module:function
# For example:
# console_scripts =
#     fibonacci = gouda.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov gouda --cov-report term-missing  --cov-report html
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[aliases]
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = build/sphinx

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py
ignore = E501


[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.1.1
package = gouda
extensions =
    markdown
    no_skeleton
    pre_commit
    tox
    travis
